#version 450

#extension GL_EXT_mesh_shader : require

const uint MaxVert = 64;
const uint MaxPrim = 64;

const uint MAX_DEBUG_COLORS = 10;

const vec3 debugColors[MAX_DEBUG_COLORS] = {
  vec3(1,1,1),
  vec3(1,0,0),
  vec3(0,1,0),
  vec3(0,0,1),
  vec3(1,1,0),
  vec3(1,0,1),
  vec3(0,1,1),
  vec3(1,0.5,0),
  vec3(0.5,1,0),
  vec3(0,0.5,1),
  };

layout(local_size_x = 64) in;
layout(triangles, max_vertices = 64, max_primitives = 64) out;

struct Payload {
  uint firstMeshlet;
  };

// taskPayloadSharedEXT Payload payload;

layout(push_constant, std430) uniform PushConstant {
  mat4 mvp;
  uint meshletCount;
  } push;
layout(std430, binding = 0) readonly buffer Vbo { float vertices[];   };
layout(std430, binding = 1) readonly buffer Ibo { uint  primitives[]; };


out gl_MeshPerVertexEXT {
  vec4 gl_Position;
  } gl_MeshVerticesEXT[];
layout(location = 0) out vec4 outColor[];

uint meshletId = gl_WorkGroupID.x;// + payload.firstMeshlet;

vec3 vertex(uint id) {
  id += meshletId * MaxVert;
  return vec3(vertices[id*3+0], vertices[id*3+1], vertices[id*3+2]);
  }

uvec3 primitive(uint id) {
  id += meshletId * MaxPrim;
  uint  bits = primitives[id];
  uvec3 prim;
  prim.x = ((bits >>  0) & 0xFF);
  prim.y = ((bits >>  8) & 0xFF);
  prim.z = ((bits >> 16) & 0xFF);
  return prim;
  }

uvec2 meshlet() {
  uint id   = meshletId * MaxPrim;
  uint bits = primitives[id];

  uvec2 m;
  m.x = MaxVert;
  m.y = ((bits >> 24) & 0xFF);
  return m;
  }

void main() {
  const uint  index = gl_LocalInvocationID.x;

  const vec4  pos  = push.mvp * vec4(vertex(index), 1);
  const uvec3 prim = primitive(index);
  const uvec2 ms   = meshlet();

  SetMeshOutputsEXT(ms.x, ms.y);

  gl_MeshVerticesEXT[index].gl_Position = pos;
  // Vertices color
  outColor[index] = vec4(debugColors[gl_WorkGroupID.x%MAX_DEBUG_COLORS], 1.0);
  if(index<ms.y)
    gl_PrimitiveTriangleIndicesEXT[index] = prim;
  }
