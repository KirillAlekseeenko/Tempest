#version 450

#extension GL_EXT_control_flow_attributes:enable

layout(local_size_x = 128) in;

struct Descriptor
{
  uint drawId;
  uint ptr;
  uint indSz;
};

struct DrawIndexedIndirectCommand
{
  uint drawId;
  uint indexCountSrc;
  uint indexCount;
  uint instanceCount;
  uint firstIndex;    // prefix sum
  int  vertexOffset;  // can be abused to offset into var_buffer
  uint firstInstance; // caps: should be zero
  uint padding0;
};

layout(binding = 0, std430) restrict buffer EngineInternal0
{
  DrawIndexedIndirectCommand indirect[];
};

layout(binding = 1, std430) restrict buffer EngineInternal1
{
  uint       grow;
  uint       grow2;
  Descriptor desc[];
} mesh;

layout(binding = 2, std430) restrict buffer EngineInternal2
{
  uint grow;
  uint heap[];
} var;

shared uint partialSummIbo[gl_WorkGroupSize.x];

layout(push_constant, std140) uniform UboPush {
  uint indirectCmdCount;
  };

void main() {
  uint index = gl_LocalInvocationID.x;
  uint len   = indirectCmdCount;

  uint b = ((index+0)*len)/gl_WorkGroupSize.x;
  uint e = ((index+1)*len)/gl_WorkGroupSize.x;

  uint sumIbo = 0;
  [[loop]]
  for(uint i=b; i<e; ++i) {
    sumIbo += indirect[i].indexCountSrc;
    }
  partialSummIbo[index] = sumIbo;

  memoryBarrierShared();
  barrier();

  uint prefixIbo = 0;
  for(uint i=0; i<index; ++i)
    prefixIbo += partialSummIbo[i];

  memoryBarrierShared();
  barrier();

  const uint grow = var.grow;
  [[loop]]
  for(uint i=b; i<e; ++i) {
    uint indexCount = indirect[i].indexCountSrc;
    uint firstIndex = grow + prefixIbo;
    uint inst       = indexCount>0 ? 1 : 0;

    prefixIbo += indexCount;

    indirect[i].indexCount    = 0;
    indirect[i].instanceCount = inst;
    indirect[i].firstIndex    = firstIndex;
    indirect[i].vertexOffset  = 0;
    indirect[i].firstInstance = 0;
    indirect[i].padding0      = 0;
    }

  barrier();
  // cleanup
  [[branch]]
  if(gl_LocalInvocationIndex==0) {
    mesh.grow2 = 0;
    var.grow   = 0;
    }
  for(uint i=b; i<e; ++i) {
    indirect[i].indexCountSrc = 0;
    }
  }
