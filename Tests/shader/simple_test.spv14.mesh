#version 450

#extension GL_EXT_mesh_shader : require

layout(local_size_x = 3, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 3, max_primitives = 1) out;

struct TaskPayload {
  int dummy;
  };
taskPayloadSharedEXT TaskPayload payload;

out gl_MeshPerVertexEXT {
  vec4 gl_Position;
  } gl_MeshVerticesEXT[];
// Custom vertex output block
layout(location = 0) out vec4 v_out[];  // [max_vertices]

layout(std430, binding = 0) readonly buffer Vbo { vec2 vertices[]; };
const vec3 colors[3] = {vec3(1,0,0), vec3(0,1,0), vec3(0,0,1)};

void main() {
  // Number of triangles
  SetMeshOutputsEXT(3, 1);

  // Vertices position
  gl_MeshVerticesEXT[gl_LocalInvocationIndex].gl_Position = vec4(vertices[gl_LocalInvocationIndex], payload.dummy, 1);

  // Vertices color
  v_out[gl_LocalInvocationIndex] = vec4(colors[gl_LocalInvocationIndex], 1.0);

  // Triangle indices
  if(gl_LocalInvocationIndex<1) {
    gl_PrimitiveTriangleIndicesEXT[0] = uvec3(0, 1, 2);
    }
  }
