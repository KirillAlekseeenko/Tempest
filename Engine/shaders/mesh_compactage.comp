#version 450

#extension GL_EXT_control_flow_attributes:enable

layout(local_size_x = 64) in;

struct Descriptor
{
  uint drawId;
  uint ptr;
  uint indSz;
};

struct DrawIndexedIndirectCommand
{
  uint drawId;
  uint indexCountSrc;
  uint indexCount;
  uint instanceCount;
  uint firstIndex;    // prefix sum
  int  vertexOffset;  // can be abused to offset into var_buffer
  uint firstInstance; // caps: should be zero
  uint padding0;
};

layout(binding = 0, std430) restrict buffer EngineInternal0
{
  DrawIndexedIndirectCommand indirect[];
};

layout(binding = 1, std430) restrict buffer EngineInternal1
{
  uint       grow;
  uint       grow2;
  Descriptor desc[];
} mesh;

layout(binding = 2, std430) restrict buffer EngineInternal2
{
  uint    grow;
  uint    heap[];
} var;

shared uint workId;
shared uint iboOffset;

void main() {
  const uint total = atomicAdd(mesh.grow, 0);

  while(true) {
    [[branch]]
    if(gl_LocalInvocationIndex==0) {
      uint at = atomicAdd(mesh.grow2, 1);
      if(at==total)
        atomicExchange(mesh.grow, 0);
      workId = at;
      }
    barrier();

    const uint at = workId;
    [[branch]]
    if(at>=total)
      return;

    const Descriptor d = mesh.desc[at];
    if(gl_LocalInvocationIndex==0) {
      iboOffset = atomicAdd(indirect[d.drawId].indexCount, d.indSz) + indirect[d.drawId].firstIndex;
      }
    barrier();

    [[loop]]
    for(uint i=gl_LocalInvocationIndex; i<d.indSz; i+=gl_WorkGroupSize.x) {
      var.heap[iboOffset+i] = var.heap[d.ptr+i];
      }
    }
  }
